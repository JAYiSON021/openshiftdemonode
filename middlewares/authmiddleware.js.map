{"version":3,"sources":["../../src/middlewares/authmiddleware.js"],"names":["TOKENTIME","tokentime","SECRET","secret","authenticate","generateAccessTokenSME","req","res","next","getAccountByUtypeUname","body","email","then","result","token","sign","id","user","expiresIn","err","status","message","catch","generateAccessTokenLearner","generateAccessTokenGurus","respond","json","username","isGurus","getAccountByUserId","account","usertype","isLearner","isSme","module","exports"],"mappings":"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","file":"authmiddleware.js","sourcesContent":["import jwt from 'jsonwebtoken'\r\nimport expressJwt from 'express-jwt'\r\nimport Account from '../models/users/account'\r\nimport config from '../config'\r\n\r\n// Repos\r\nimport account_repo from '../lib/repo/account_repo'\r\n\r\nconst TOKENTIME = config.tokentime\r\nconst SECRET = config.secret\r\n\r\nlet authenticate = expressJwt({ secret: SECRET })\r\n\r\nlet generateAccessTokenSME = (req, res, next) => {\r\n    account_repo.getAccountByUtypeUname(\"sme\", req.body.email)\r\n        .then((result) => {\r\n            if (result) {\r\n                req.token = req.token || {}\r\n                req.token = jwt.sign({\r\n                    id: req.user.id,\r\n                }, SECRET, {\r\n                    expiresIn: TOKENTIME\r\n                })\r\n                next()\r\n            } else {\r\n                const err = { status: 404, message: 'cant find sme' }\r\n                next(err);\r\n            }\r\n        })\r\n        .catch(err => {\r\n            next(err)\r\n        })\r\n}\r\n\r\nlet generateAccessTokenLearner = (req, res, next) => {\r\n    account_repo.getAccountByUtypeUname(\"learner\", req.body.email)\r\n        .then((result) => {\r\n            if (result) {\r\n                req.token = req.token || {}\r\n                req.token = jwt.sign({\r\n                    id: req.user.id,\r\n                }, SECRET, {\r\n                    expiresIn: TOKENTIME\r\n                })\r\n                next()\r\n            } else {\r\n                const err = { status: 404, message: 'cant find learner' }\r\n                next(err);\r\n            }\r\n            \r\n        })\r\n        .catch(err => {\r\n            next(err)\r\n        })\r\n}\r\n\r\nlet generateAccessTokenGurus = (req, res, next) => {\r\n    account_repo.getAccountByUtypeUname(\"gurus\", req.body.email)\r\n        .then((result) => {\r\n            if (result) {\r\n                req.token = req.token || {}\r\n                req.token = jwt.sign({\r\n                    id: req.user.id,\r\n                }, SECRET, {\r\n                    expiresIn: TOKENTIME\r\n                })\r\n                next()\r\n            } else {\r\n                const err = { status: 404, message: 'cant find gurus' }\r\n                next(err);\r\n            }\r\n        })\r\n        .catch(err => {\r\n            next(err)\r\n        })\r\n}\r\n\r\nlet respond = (req, res) => {\r\n    res.status(200).json({\r\n        user: req.user.username,\r\n        token: req.token\r\n    })\r\n}\r\n\r\nlet isGurus = (req, res, next) => {\r\n    account_repo.getAccountByUserId(req.user.id)\r\n        .then(account => {\r\n            if (account.usertype) {\r\n                if (account.usertype == 'gurus') {\r\n                    next()\r\n                } else {\r\n                    const err = { status: 404, message: 'cant find gurus account' }\r\n                    next(err); \r\n                }\r\n            } else {\r\n                const err = { status: 404, message: 'cant find gurus' }\r\n                next(err);\r\n            }\r\n        })\r\n}\r\n\r\nlet isLearner = (req, res, next) => {\r\n    account_repo.getAccountByUserId(req.user.id)\r\n        .then(account => {\r\n            if (account.usertype) {\r\n                if (account.usertype == 'learner') {\r\n                    next()\r\n                } else {\r\n                    const err = { status: 404, message: 'cant find learner account' }\r\n                    next(err); \r\n                }\r\n            } else {\r\n                const err = { status: 404, message: 'cant find learner account' }\r\n                next(err);\r\n            }\r\n        })\r\n}\r\n\r\nlet isSme = (req, res, next) => {\r\n    account_repo.getAccountByUserId(req.user.id)\r\n        .then(account => {\r\n            if (account.usertype) {\r\n                if (account.usertype == 'sme') {\r\n                    next()\r\n                } else {\r\n                    const err = { status: 404, message: 'cant find sme account' }\r\n                    next(err); \r\n                }\r\n            } else {\r\n                const err = { status: 404, message: 'cant find sme account' }\r\n                next(err);\r\n            }\r\n        })\r\n}\r\n\r\nmodule.exports = { \r\n    authenticate, \r\n    generateAccessTokenSME, \r\n    generateAccessTokenLearner, \r\n    generateAccessTokenGurus, \r\n    respond,\r\n    isGurus,\r\n    isLearner,\r\n    isSme\r\n}"]}