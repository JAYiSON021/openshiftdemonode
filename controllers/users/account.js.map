{"version":3,"sources":["../../../src/controllers/users/account.js"],"names":["config","db","api","post","req","res","next","errors","isEmpty","status","json","mapped","result","insertAccount","body","then","result1","insertLearner","result2","updateAccountProfile","_id","authenticate","session","code","message","catch","err","insertSme","insertGuru","scope","get","logout","getAccountByUserId","user","id","getInfoById","account","profile","params","lid","searchByKeyword","key","count","learners","length"],"mappings":"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","file":"account.js","sourcesContent":["// Core\r\nimport mongoose from 'mongoose';\r\nimport Router from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport passport from 'passport';\r\nimport { validationResult } from 'express-validator/check';\r\nimport { matchedData } from 'express-validator/filter';\r\nimport Promise from 'promise';\r\n\r\n// Utils\r\nimport config from '../../config';\r\n\r\n// Middlewares\r\nimport { generateAccessTokenSME, generateAccessTokenLearner, generateAccessTokenGurus, respond, authenticate, isGurus } from '../../middlewares/authmiddleware';\r\nimport { learnerRegValidation, smeRegValidation, guruRegValidation } from '../../middlewares/validators/users/register';\r\n\r\n// Repos\r\nimport account_repo from '../../lib/repo/account_repo';\r\nimport learner_repo from '../../lib/repo/learner_repo';\r\nimport sme_repo from '../../lib/repo/sme_repo';\r\nimport gurus_repo from '../../lib/repo/gurus_repo';\r\n\r\nexport default ({ config, db}) => {\r\n    let api = Router()\r\n\r\n    // '/v1/account/register/learner'\r\n    api.post('/register/learner', learnerRegValidation, (req, res, next) => {\r\n    \r\n        const errors = validationResult(req);\r\n\r\n        if (!errors.isEmpty()) { \r\n            return res.status(422).json({ errors: errors.mapped() });\r\n        } else {\r\n         \r\n        let result = [];\r\n        account_repo.insertAccount(req.body)\r\n            .then(result1 => {\r\n                result[0] = result1;\r\n                return learner_repo.insertLearner(req.body)\r\n            })\r\n            .then(result2 => {\r\n                result[1] = result2;\r\n                return account_repo.updateAccountProfile(result[0], result[1]._id)\r\n            })\r\n            .then(finalResult => {\r\n                passport.authenticate('local', { session: false})(req, res, () => {\r\n                    res.status(200).json({ code: \"success\", message: 'Learner Registered Successfuly!' })\r\n                })\r\n                result = []\r\n            })\r\n            .catch(err => {\r\n                next(err);\r\n                result = []\r\n            })\r\n        }\r\n\r\n    })\r\n\r\n    // '/v1/account/register/sme'\r\n    api.post('/register/sme', smeRegValidation, (req, res, next) => {\r\n\r\n        const errors = validationResult(req)\r\n        \r\n        if (!errors.isEmpty()) { \r\n            next(errors.mapped());\r\n        } else {\r\n            let result = [];\r\n            account_repo.insertAccount(req.body)\r\n                .then(result1 => {\r\n                    result[0] = result1;\r\n                    return sme_repo.insertSme(req.body);\r\n                })\r\n                .then(result2 => {\r\n                    result[1] = result2;\r\n                    return account_repo.updateAccountProfile(result[0], result[1]._id)\r\n                })\r\n                .then(finalResult => {\r\n                    passport.authenticate('local', { session: false})(req, res, () => {\r\n                        res.status(200).json({ code: \"success\", message: 'Sme Registered Successfuly!' })\r\n                    })\r\n                    result = []\r\n                })\r\n                .catch(err => {\r\n                    next(err);\r\n                    result = []\r\n                })\r\n        }\r\n\r\n    })\r\n\r\n    // '/v1/account/register/gurus'\r\n    api.post('/register/gurus', guruRegValidation, (req, res, next) => {\r\n        \r\n        const errors = validationResult(req)\r\n        \r\n        if (!errors.isEmpty()) { \r\n            next(errors.mapped());\r\n        } else {\r\n            let result = [];\r\n            account_repo.insertAccount(req.body)\r\n                .then(result1 => {\r\n                    result[0] = result1;\r\n                    return gurus_repo.insertGuru(req.body)\r\n                })\r\n                .then(result2 => {\r\n                    result[1] = result2;\r\n                    return account_repo.updateAccountProfile(result[0], result[1]._id)\r\n                })\r\n                .then(finalResult => {\r\n                    passport.authenticate('local', { session: false})(req, res, () => {\r\n                        res.status(200).json({ code: \"success\", message: 'Gurus Admin Registered Successfuly!' })\r\n                    })\r\n                    result = []\r\n                })\r\n                .catch(err => {\r\n                    next(err);\r\n                    result = []\r\n                })\r\n        }\r\n\r\n    })\r\n\r\n    // 'v1/account/login/gurus'\r\n    api.post('/login/gurus', passport.authenticate(\r\n        'local', {\r\n            session: false,\r\n            scope: []\r\n    }), generateAccessTokenGurus, respond);\r\n\r\n    // 'v1/account/login/sme'\r\n    api.post('/login/sme', passport.authenticate(\r\n        'local', {\r\n            session: false,\r\n            scope: []\r\n    }), generateAccessTokenSME, respond);\r\n\r\n    // 'v1/account/login/learner'\r\n    api.post('/login/learner', passport.authenticate(\r\n        'local', {\r\n            session: false,\r\n            scope: []\r\n    }), generateAccessTokenLearner, respond);\r\n\r\n    // '/v1/account/logout'\r\n    api.get('/logout', authenticate, (req, res) => {\r\n        req.logout()\r\n        res.status(200).json({message: 'logout success'})\r\n    })\r\n\r\n    // '/v1/account/info/learner'\r\n    api.get('/info/learner', authenticate, (req, res, next) => {\r\n        account_repo.getAccountByUserId(req.user.id)\r\n            .then(account => learner_repo.getInfoById(account.profile))\r\n            .then(profile => res.status(200).json(profile))\r\n            .catch(err => next(err))\r\n    })\r\n\r\n    // '/v1/account/info/sme'\r\n    api.get('/info/sme', authenticate, (req, res, next) => {\r\n        account_repo.getAccountByUserId(req.user.id)\r\n            .then(account => sme_repo.getInfoById(account.profile))\r\n            .then(profile => res.status(200).json(profile))\r\n            .catch(err => next(err))\r\n    })  \r\n\r\n    // '/v1/account/info/gurus'\r\n    api.get('/info/gurus', authenticate, (req, res, next) => {\r\n        account_repo.getAccountByUserId(req.user.id)\r\n            .then(account => gurus_repo.getInfoById(account.profile))\r\n            .then(profile => res.status(200).json(profile))\r\n            .catch(err => next(err))\r\n    })\r\n\r\n    // '/v1/account/learner/:lid'\r\n    api.get('/learner/:lid', authenticate, isGurus, (req, res, next) => {\r\n        learner_repo.getInfoById(req.params.lid)\r\n            .then(profile => res.status(200).json(profile))\r\n            .catch(err => next(err))\r\n    })\r\n\r\n    // '/v1/account/learner/search/:key'\r\n    api.get('/learner/search/:key', authenticate, isGurus, (req, res, next) => {\r\n        learner_repo.searchByKeyword(req.params.key)\r\n            .then(learners => res.status(200).json({count: learners.length, learners}))\r\n            .catch(err => next(err))\r\n    })\r\n\r\n    return api\r\n}\r\n"]}