{"version":3,"sources":["../../../src/controllers/transactions/training_request.js"],"names":["config","db","api","post","req","res","next","getAccountByUserId","user","id","then","getInfoById","account","profile","insertTrainingRequest","body","_id","status","json","training_req","catch","err","get","getAllTrainingRequest","count","trequest","length"],"mappings":";;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AAGA;;;;AAGA;;AAGA;;;;AACA;;;;AACA;;;;;;AANA;AAZA;kBAoBe,gBAAmB;AAAA,QAAhBA,MAAgB,QAAhBA,MAAgB;AAAA,QAARC,EAAQ,QAARA,EAAQ;;AAC9B,QAAIC,MAAM,wBAAV;;AAEA;AACAA,QAAIC,IAAJ,CAAS,MAAT,gCAA+B,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;;AAE/C,+BAAaC,kBAAb,CAAgCH,IAAII,IAAJ,CAASC,EAAzC,EACKC,IADL,CACU;AAAA,mBAAW,uBAAaC,WAAb,CAAyBC,QAAQC,OAAjC,CAAX;AAAA,SADV,EAEKH,IAFL,CAEU;AAAA,mBAAW,gCAAsBI,qBAAtB,CAA4CV,IAAIW,IAAhD,EAAsDF,QAAQG,GAA9D,CAAX;AAAA,SAFV,EAGKN,IAHL,CAGU;AAAA,mBAAgBL,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,YAArB,CAAhB;AAAA,SAHV,EAIKC,KAJL,CAIW,eAAO;AACVd,iBAAKe,GAAL;AACH,SANL;AAOH,KATD;;AAWA;AACAnB,QAAIoB,GAAJ,CAAQ,MAAR,yDAAuC,UAAClB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvD,wCAAsBiB,qBAAtB,GACKb,IADL,CACU,oBAAY;AACdL,gBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACM,OAAOC,SAASC,MAAjB,EAAyBD,kBAAzB,EAArB;AACH,SAHL,EAIKL,KAJL,CAIW;AAAA,mBAAOd,KAAKe,GAAL,CAAP;AAAA,SAJX;AAKH,KAND;;AAQA,WAAOnB,GAAP;AACH,C;;AA9BD;;;AANA","file":"training_request.js","sourcesContent":["// Core\r\nimport mongoose from 'mongoose';\r\nimport Router from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport passport from 'passport';\r\nimport { validationResult } from 'express-validator/check';\r\nimport { matchedData } from 'express-validator/filter';\r\nimport Promise from 'promise';\r\n\r\n// Utils\r\nimport config from '../../config';\r\n\r\n// Middlewares\r\nimport { authenticate, isGurus } from '../../middlewares/authmiddleware';\r\n\r\n// Repos\r\nimport training_request_repo from '../../lib/repo/training_request_repo';\r\nimport account_repo from '../../lib/repo/account_repo';\r\nimport learner_repo from '../../lib/repo/learner_repo';\r\n\r\nexport default ({ config, db}) => {\r\n    let api = Router()\r\n\r\n    // '/v1/request/new'\r\n    api.post('/new', authenticate, (req, res, next) => {\r\n\r\n        account_repo.getAccountByUserId(req.user.id)\r\n            .then(account => learner_repo.getInfoById(account.profile))\r\n            .then(profile => training_request_repo.insertTrainingRequest(req.body, profile._id))\r\n            .then(training_req => res.status(200).json(training_req))\r\n            .catch(err => {\r\n                next(err);\r\n            });\r\n    });\r\n\r\n    // '/v1/request/all'\r\n    api.get('/all', authenticate, isGurus, (req, res, next) => {\r\n        training_request_repo.getAllTrainingRequest()\r\n            .then(trequest => {\r\n                res.status(200).json({count: trequest.length, trequest});\r\n            })\r\n            .catch(err => next(err));\r\n    });\r\n\r\n    return api\r\n}\r\n"]}