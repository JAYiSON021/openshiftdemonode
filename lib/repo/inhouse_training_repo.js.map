{"version":3,"sources":["../../../src/lib/repo/inhouse_training_repo.js"],"names":["InHouseTrainingRepository","body","console","log","fulfill","reject","newInHouseTraining","topic","frequency","description","sme","location","max_attendees","training_time","training_dates","dateIfy","save","err","_newInHouseTraining","status","message","find","_inhouseTrainings","sort","createdAt","id","lid","findById","_inhouseTraining","interested_learners","push","__inhouseTraining","going_learners","remove","lids","update","$addToSet","$each","upsert","$pull","returnField","ihtr","key","$or","$regex","RegExp","dates","training_dates_arr","forEach","Date","tdate","module","exports"],"mappings":"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","file":"inhouse_training_repo.js","sourcesContent":["import Promise from 'promise';\r\nimport InHouseTraining from '../../models/transactions/inhouse_training';\r\n\r\nclass InHouseTrainingRepository {\r\n\r\n    insertInHouseTraining(body) {\r\n        console.log('*** InHouseTrainingRepository.insertInHouseTraining');\r\n\r\n        return new Promise((fulfill, reject) => {\r\n\r\n            let newInHouseTraining = new InHouseTraining();\r\n\r\n            newInHouseTraining.topic = body.topic;\r\n            newInHouseTraining.frequency = body.frequency;\r\n            newInHouseTraining.description = body.description;\r\n            newInHouseTraining.sme = body.sme;\r\n            newInHouseTraining.location = body.location;\r\n            newInHouseTraining.max_attendees = body.max_attendees;\r\n            newInHouseTraining.training_time = body.training_time;\r\n            newInHouseTraining.training_dates = dateIfy(body.training_dates);\r\n\r\n            newInHouseTraining.save((err, _newInHouseTraining) => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else if (!_newInHouseTraining) {\r\n                    let err = { status: 500, message: 'Failed to insert new In-house Training' };\r\n                    reject(err);\r\n                } else {    \r\n                    fulfill(_newInHouseTraining);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    getAllInhouseTrainings() {\r\n        console.log('*** InHouseTrainingRepository.getAllInhouseTrainings');\r\n\r\n        return new Promise((fulfill, reject) => {\r\n            InHouseTraining.find({}, (err, _inhouseTrainings) => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else if (!_inhouseTrainings) {\r\n                    let err = { status: 404, message: 'Cant find any Training' };\r\n                    reject(err);\r\n                } else {    \r\n                    fulfill(_inhouseTrainings);\r\n                }\r\n            }).sort({ createdAt: -1 });\r\n        })\r\n    }\r\n\r\n    insertInterestedLearner(id, lid) {\r\n        \r\n        console.log('*** InHouseTrainingRepository.insertInterestedLearner');\r\n        \r\n        return new Promise((fulfill, reject) => {\r\n            InHouseTraining.findById(id, (err, _inhouseTraining) => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else if (!_inhouseTraining) {\r\n                    let err = { status: 404, message: 'Cant find Training' };\r\n                    reject(err);\r\n                } else {\r\n                    _inhouseTraining.interested_learners.push(lid);\r\n                    _inhouseTraining.save((err, __inhouseTraining) => {\r\n                        if (err) {\r\n                            reject(err);\r\n                        } else if(!__inhouseTraining) {\r\n                            let err = { status: 400, message: 'Unable to process' };\r\n                            reject(err);\r\n                        } else {\r\n                            fulfill(_inhouseTraining);\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    insertInterestedLearner(id, lid) {\r\n        \r\n        console.log('*** InHouseTrainingRepository.insertInterestedLearner');\r\n        \r\n        return new Promise((fulfill, reject) => {\r\n            InHouseTraining.findById(id, (err, _inhouseTraining) => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else if (!_inhouseTraining) {\r\n                    let err = { status: 404, message: 'Cant find Training' };\r\n                    reject(err);\r\n                } else {\r\n                    _inhouseTraining.interested_learners.push(lid);\r\n                    _inhouseTraining.save((err, __inhouseTraining) => {\r\n                        if (err) {\r\n                            reject(err);\r\n                        } else if(!__inhouseTraining) {\r\n                            let err = { status: 400, message: 'Unable to process' };\r\n                            reject(err);\r\n                        } else {\r\n                            fulfill(_inhouseTraining);\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    insertGoingLearner(id, lid) {\r\n        \r\n        console.log('*** InHouseTrainingRepository.insertGoingLearner');\r\n        \r\n        return new Promise((fulfill, reject) => {\r\n            InHouseTraining.findById(id, (err, _inhouseTraining) => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else if (!_inhouseTraining) {\r\n                    let err = { status: 404, message: 'Cant find Training' };\r\n                    reject(err);\r\n                } else {\r\n                    _inhouseTraining.going_learners.push(lid);\r\n                    _inhouseTraining.interested_learners.remove(lid);\r\n                    _inhouseTraining.save((err, __inhouseTraining) => {\r\n                        if (err) {\r\n                            reject(err);\r\n                        } else if(!__inhouseTraining) {\r\n                            let err = { status: 400, message: 'Unable to process' };\r\n                            reject(err);\r\n                        } else {\r\n                            fulfill(_inhouseTraining);\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    insertGoingLearners(id, lids) {\r\n        \r\n        console.log('*** InHouseTrainingRepository.insertGoingLearners');\r\n        \r\n        return new Promise((fulfill, reject) => {\r\n            InHouseTraining.update({\"_id\": id}, {$addToSet: {going_learners: {$each: lids}}}, {upsert: true}, (err, _inhouseTraining) => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else if (!_inhouseTraining) {\r\n                    let err = { status: 404, message: 'Cant find Training' };\r\n                    reject(err);\r\n                } else {\r\n                    fulfill(_inhouseTraining);\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    removeInterestedLearner(id, lid) {\r\n        console.log('*** InHouseTrainingRepository.removeInterestedLearner');\r\n        \r\n        return new Promise((fulfill, reject) => {\r\n\r\n            InHouseTraining.update(\r\n                {\"_id\": id}, \r\n                { $pull: { \"interested_learners\": lid} },\r\n                (err, _inhouseTraining) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else if (!_inhouseTraining) {\r\n                        let err = { status: 404, message: 'Cant find Training' };\r\n                        reject(err);\r\n                    } else {\r\n                        fulfill(_inhouseTraining);\r\n                    }\r\n                })\r\n        })\r\n    }\r\n\r\n    getInterestedLearnerIds(id) {\r\n        console.log('*** InHouseTrainingRepository.getInterestedLearnerIds');\r\n        \r\n        return new Promise((fulfill, reject) => {\r\n            \r\n            const returnField = {\"interested_learners\": 1};\r\n            InHouseTraining.findById(id, returnField, (err, ihtr) => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else if (!ihtr) {\r\n                    let err = { status: 404, message: 'Cant find Training' };\r\n                    reject(err);\r\n                } else {\r\n                    fulfill(ihtr);\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    getGoingLearnerIds(id) {\r\n        console.log('*** InHouseTrainingRepository.getGoingLearnerIds');\r\n        \r\n        return new Promise((fulfill, reject) => {\r\n            \r\n            const returnField = {\"going_learners\": 1};\r\n            InHouseTraining.findById(id, returnField, (err, ihtr) => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else if (!ihtr) {\r\n                    let err = { status: 404, message: 'Cant find Training' };\r\n                    reject(err);\r\n                } else {\r\n                    fulfill(ihtr);\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    searchByKey(key) {\r\n        \r\n        console.log('*** InHouseTrainingRepository.searchByKey: ' + key);\r\n        return new Promise((fulfill, reject) => {\r\n            InHouseTraining.find({\r\n                $or: \r\n                [\r\n                    { \"topic\": {$regex: new RegExp(key, \"ig\")} },\r\n                    { \"description\": {$regex: new RegExp(key, \"ig\")} },\r\n                    { \"sme\": {$regex: new RegExp(key, \"ig\")} }\r\n                ]\r\n            }, (err, ihtr) => {\r\n                    if (err) {\r\n                        reject(err)\r\n                    } else if(!ihtr) {\r\n                        let err = { status: 404, message: 'ihtr not found' }\r\n                        reject(err);\r\n                    } else {\r\n                        fulfill(ihtr);\r\n                    }\r\n            })\r\n        })\r\n    }\r\n\r\n}\r\n\r\nfunction dateIfy(dates) {\r\n    let training_dates_arr = []\r\n    dates.forEach(tdate => {\r\n        training_dates_arr.push(new Date(tdate));\r\n    });\r\n    return training_dates_arr;\r\n}\r\n\r\nmodule.exports = new InHouseTrainingRepository()\r\n"]}