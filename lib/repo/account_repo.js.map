{"version":3,"sources":["../../../src/lib/repo/account_repo.js"],"names":["AccountRepository","body","console","log","fulfill","reject","register","username","email","usertype","u_type","password","err","account","profile","save","u_name","findOne","learner","u_id","findById","status","message","module","exports"],"mappings":";;;;AAAA;;;;AACA;;;;;;;;IAEMA,iB;;;;;;;sCAEYC,I,EAAM;AAChBC,oBAAQC,GAAR,CAAY,qCAAZ;AACA,mBAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,kCAAQC,QAAR,CAAiB,sBAAY;AACzBC,8BAAUN,KAAKO,KADU;AAEzBC,8BAAUR,KAAKS;AAFU,iBAAZ,CAAjB,EAGIT,KAAKU,QAHT,EAGmB,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACjC,wBAAID,GAAJ,EAAS;AACLP,+BAAOO,GAAP;AACH,qBAFD,MAEO;AACHR,gCAAQS,OAAR;AACH;AACJ,iBATD;AAUH,aAXM,CAAP;AAYH;;;6CAEoBA,O,EAASC,O,EAAS;AACnCZ,oBAAQC,GAAR,CAAY,4CAAZ;;AAEA,mBAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCQ,wBAAQC,OAAR,GAAkBA,OAAlB;AACAD,wBAAQE,IAAR,CAAa,eAAO;AAChB,wBAAIH,GAAJ,EAAS;AACLP,+BAAOO,GAAP;AACH,qBAFD,MAEO;AACHR,gCAAQS,OAAR;AACH;AACJ,iBAND;AAOH,aATM,CAAP;AAUH;;;+CAEsBH,M,EAAQM,M,EAAQ;AACnCd,oBAAQC,GAAR,CAAY,8CAAZ;;AAEA,mBAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,kCAAQY,OAAR,CAAgB,EAAER,UAAUC,MAAZ,EAAoBH,UAAUS,MAA9B,EAAhB,EAAwD,UAACJ,GAAD,EAAMM,OAAN,EAAkB;AACtE,wBAAIN,GAAJ,EAAS;AACLP,+BAAOO,GAAP;AACH,qBAFD,MAEO;AACHR,gCAAQc,OAAR;AACH;AACJ,iBAND;AAOH,aARM,CAAP;AASH;;;2CAGkBC,I,EAAM;AACrBjB,oBAAQC,GAAR,CAAY,8CAAZ;;AAEA,mBAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,kCAAQe,QAAR,CAAiBD,IAAjB,EAAuB,UAACP,GAAD,EAAMC,OAAN,EAAkB;AACrC,wBAAID,GAAJ,EAAS;AACLP,+BAAOO,GAAP;AACH,qBAFD,MAEO,IAAI,CAACC,OAAL,EAAc;AACjB,4BAAID,OAAM,EAAES,QAAQ,GAAV,EAAeC,SAAS,mBAAxB,EAAV;AACAjB,+BAAOO,IAAP;AACH,qBAHM,MAGA;AACHR,gCAAQS,OAAR;AACH;AACJ,iBATD;AAUH,aAXM,CAAP;AAYH;;;;;;AAKLU,OAAOC,OAAP,GAAiB,IAAIxB,iBAAJ,EAAjB","file":"account_repo.js","sourcesContent":["import Account from '../../models/users/account'\r\nimport Promise from 'promise';\r\n\r\nclass AccountRepository {\r\n\r\n    insertAccount(body) {\r\n        console.log('*** AccountRepository.insertAccount')\r\n        return new Promise((fulfill, reject) => {\r\n            Account.register(new Account({\r\n                username: body.email,\r\n                usertype: body.u_type\r\n            }), body.password, (err, account) => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    fulfill(account);\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    updateAccountProfile(account, profile) {\r\n        console.log('*** AccountRepository.updateAccountProfile')\r\n\r\n        return new Promise((fulfill, reject) => {\r\n            account.profile = profile\r\n            account.save(err => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    fulfill(account);\r\n                }\r\n            }) \r\n        })\r\n    }\r\n\r\n    getAccountByUtypeUname(u_type, u_name) {\r\n        console.log('*** AccountRepository.getAccountByUtypeUname')\r\n\r\n        return new Promise((fulfill, reject) => {\r\n            Account.findOne({ usertype: u_type, username: u_name }, (err, learner) => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    fulfill(learner);\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    getAccountByUserId(u_id) {\r\n        console.log('*** AccountRepository.getAccountByUtypeUname')\r\n\r\n        return new Promise((fulfill, reject) => {\r\n            Account.findById(u_id, (err, account) => {\r\n                if (err) {\r\n                    reject(err)\r\n                } else if (!account) {\r\n                    let err = { status: 404, message: 'Account not found' }\r\n                    reject(err);\r\n                } else {\r\n                    fulfill(account);\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n}\r\n\r\nmodule.exports = new AccountRepository()\r\n"]}