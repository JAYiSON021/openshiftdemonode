{"version":3,"sources":["../../../src/lib/repo/training_request_repo.js"],"names":["TrainingRequestRepository","body","learner","console","log","fulfill","reject","newTrainingRequest","topic","training_type","group_name","training_date","Date","prefered_location","expected_no_attendees","contact_person","requested_by","save","err","newTrainingReq","status","message","find","trequests","sort","createdAt","module","exports"],"mappings":";;;;AAAA;;;;AACA;;;;;;;;IAEMA,yB;;;;;;;8CAEoBC,I,EAAMC,O,EAAS;AACjCC,oBAAQC,GAAR,CAAY,qDAAZ;;AAEA,mBAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,qBAAqB,gCAAzB;AACAA,mCAAmBC,KAAnB,GAA2BP,KAAKO,KAAhC;AACAD,mCAAmBE,aAAnB,GAAmCR,KAAKQ,aAAxC;AACAF,mCAAmBG,UAAnB,GAAgCT,KAAKS,UAArC;AACAH,mCAAmBI,aAAnB,GAAmC,IAAIC,IAAJ,CAASX,KAAKU,aAAd,CAAnC;AACAJ,mCAAmBM,iBAAnB,GAAuCZ,KAAKY,iBAA5C;AACAN,mCAAmBO,qBAAnB,GAA2Cb,KAAKa,qBAAhD;AACAP,mCAAmBQ,cAAnB,GAAoCd,KAAKc,cAAzC;AACAR,mCAAmBS,YAAnB,GAAkCd,OAAlC;;AAEAK,mCAAmBU,IAAnB,CAAwB,UAACC,GAAD,EAAMC,cAAN,EAAyB;AAC7C,wBAAID,GAAJ,EAAS;AACLZ,+BAAOY,GAAP;AACH,qBAFD,MAEO,IAAI,CAACC,cAAL,EAAqB;AACxB,4BAAID,OAAM,EAAEE,QAAQ,GAAV,EAAeC,SAAS,mCAAxB,EAAV;AACAf,+BAAOY,IAAP;AACH,qBAHM,MAGA;AACHb,gCAAQc,cAAR;AACH;AACJ,iBATD;AAUH,aAtBM,CAAP;AAuBH;;;gDAEuB;AACpBhB,oBAAQC,GAAR,CAAY,qDAAZ;;AAEA,mBAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,2CAAgBgB,IAAhB,CAAqB,EAArB,EAAyB,UAACJ,GAAD,EAAMK,SAAN,EAAoB;AACzC,wBAAIL,GAAJ,EAAS;AACLZ,+BAAOY,GAAP;AACH,qBAFD,MAEO,IAAI,CAACK,SAAL,EAAgB;AACnB,4BAAIL,QAAM,EAAEE,QAAQ,GAAV,EAAeC,SAAS,6BAAxB,EAAV;AACAf,+BAAOY,KAAP;AACH,qBAHM,MAGA;AACHb,gCAAQkB,SAAR;AACH;AACJ,iBATD,EASGC,IATH,CASQ,EAAEC,WAAW,CAAC,CAAd,EATR;AAUH,aAXM,CAAP;AAYH;;;;;;AAILC,OAAOC,OAAP,GAAiB,IAAI3B,yBAAJ,EAAjB","file":"training_request_repo.js","sourcesContent":["import Promise from 'promise';\r\nimport TrainingRequest from '../../models/transactions/training_request';\r\n\r\nclass TrainingRequestRepository {\r\n\r\n    insertTrainingRequest(body, learner) {\r\n        console.log('*** TrainingRequestRepository.insertTrainingRequest');\r\n\r\n        return new Promise((fulfill, reject) => {\r\n\r\n            let newTrainingRequest = new TrainingRequest();\r\n            newTrainingRequest.topic = body.topic;\r\n            newTrainingRequest.training_type = body.training_type;\r\n            newTrainingRequest.group_name = body.group_name;\r\n            newTrainingRequest.training_date = new Date(body.training_date);\r\n            newTrainingRequest.prefered_location = body.prefered_location;\r\n            newTrainingRequest.expected_no_attendees = body.expected_no_attendees;\r\n            newTrainingRequest.contact_person = body.contact_person;\r\n            newTrainingRequest.requested_by = learner;\r\n\r\n            newTrainingRequest.save((err, newTrainingReq) => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else if (!newTrainingReq) {\r\n                    let err = { status: 500, message: 'Failed to Insert Training Request'}\r\n                    reject(err);\r\n                } else {    \r\n                    fulfill(newTrainingReq);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    getAllTrainingRequest() {\r\n        console.log('*** TrainingRequestRepository.getAllTrainingRequest');\r\n\r\n        return new Promise((fulfill, reject) => {\r\n            TrainingRequest.find({}, (err, trequests) => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else if (!trequests) {\r\n                    let err = { status: 404, message: 'training requests not found' }\r\n                    reject(err);\r\n                } else {\r\n                    fulfill(trequests);\r\n                }\r\n            }).sort({ createdAt: -1 }) \r\n        });\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = new TrainingRequestRepository()\r\n"]}