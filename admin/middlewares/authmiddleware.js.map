{"version":3,"sources":["../../../src/admin/middlewares/authmiddleware.js"],"names":["TOKENTIME","tokentime","SECRET","secret","authenticate","generateAccessTokenAdmin","req","res","next","find","usertype","username","body","email","err","vadmin","json","error","message","length","token","sign","id","user","expiresIn","status","code","respond","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,YAAY,iBAAOC,SAAzB;AACA,IAAMC,SAAS,iBAAOC,MAAtB;;AAEA,IAAIC,eAAe,0BAAW,EAAED,QAAQD,MAAV,EAAX,CAAnB;;AAEA,IAAIG,2BAA2B,SAA3BA,wBAA2B,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/C,sBAAQC,IAAR,CAAa,EAAEC,UAAU,OAAZ,EAAqBC,UAAUL,IAAIM,IAAJ,CAASC,KAAxC,EAAb,EAA8D,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAC3E,YAAID,GAAJ,EAAS;AAAEP,gBAAIS,IAAJ,CAAS,EAACC,OAAOH,IAAII,OAAZ,EAAT;AAAiC;AAC5C,YAAKH,OAAOI,MAAP,GAAgB,CAArB,EAAyB;AACrBb,gBAAIc,KAAJ,GAAYd,IAAIc,KAAJ,IAAa,EAAzB;AACAd,gBAAIc,KAAJ,GAAY,uBAAIC,IAAJ,CAAS;AACjBC,oBAAIhB,IAAIiB,IAAJ,CAASD;AADI,aAAT,EAETpB,MAFS,EAED;AACPsB,2BAAWxB;AADJ,aAFC,CAAZ;AAKAQ;AACH,SARD,MAQO;AACHD,gBAAIkB,MAAJ,CAAW,GAAX,EAAgBT,IAAhB,CAAqB;AACjBU,sBAAM,WADW;AAEjBR,yBAAS;AAFQ,aAArB;AAIH;AACJ,KAhBD;AAiBH,CAlBD;;AAoBA,IAAIS,UAAU,SAAVA,OAAU,CAACrB,GAAD,EAAMC,GAAN,EAAc;AACxBA,QAAIkB,MAAJ,CAAW,GAAX,EAAgBT,IAAhB,CAAqB;AACjBO,cAAMjB,IAAIiB,IAAJ,CAASZ,QADE;AAEjBS,eAAOd,IAAIc;AAFM,KAArB;AAIH,CALD;;AAOAQ,OAAOC,OAAP,GAAiB,EAAEzB,0BAAF,EAAgBC,kDAAhB,EAA0CsB,gBAA1C,EAAjB","file":"authmiddleware.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport expressJwt from 'express-jwt';\r\nimport Account from '../models/account';\r\nimport config from '../config';\r\n\r\nconst TOKENTIME = config.tokentime;\r\nconst SECRET = config.secret;\r\n\r\nlet authenticate = expressJwt({ secret: SECRET });\r\n\r\nlet generateAccessTokenAdmin = (req, res, next) => {\r\n    Account.find({ usertype: \"admin\", username: req.body.email }, (err, vadmin) => {\r\n        if (err) { res.json({error: err.message}); }\r\n        if ( vadmin.length > 0 ) {\r\n            req.token = req.token || {};\r\n            req.token = jwt.sign({\r\n                id: req.user.id,\r\n            }, SECRET, {\r\n                expiresIn: TOKENTIME\r\n            });\r\n            next();\r\n        } else { \r\n            res.status(404).json({\r\n                code: \"not found\",\r\n                message: \"Invalid email or password\"\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nlet respond = (req, res) => {\r\n    res.status(200).json({\r\n        user: req.user.username,\r\n        token: req.token\r\n    });\r\n}\r\n\r\nmodule.exports = { authenticate, generateAccessTokenAdmin, respond }"]}